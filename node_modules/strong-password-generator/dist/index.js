'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _randomstring = require('randomstring');

var _randomstring2 = _interopRequireDefault(_randomstring);

var _randomWordByLength = require('random-word-by-length');

var _randomWordByLength2 = _interopRequireDefault(_randomWordByLength);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultPasswordConfig = {
    base: 'WORD',
    length: {
        min: 12,
        max: 16
    },
    capsLetters: {
        min: 3,
        max: 3
    },
    numerals: {
        min: 2,
        max: 2
    },
    spacialCharactors: {
        includes: [],
        min: 0,
        max: 0
    },
    spaces: {
        allow: false,
        min: 0,
        max: 0
    }
};
exports.getDefaultConfig = function () {
    return defaultPasswordConfig;
};
exports.generatePassword = function (configs) {
    configs = configs || defaultPasswordConfig;
    var passwordLength = generateRandomNumber(configs.length.min, configs.length.max),
        passwordWithoutApplyingConfigs = generateRandomText(configs.base, passwordLength),
        noOfCaps = generateRandomNumber(configs.capsLetters.min, configs.capsLetters.max),
        noOfNumerals = generateRandomNumber(configs.numerals.min, configs.numerals.max),
        noOfSpecialChars = generateRandomNumber(configs.spacialCharactors.min, configs.spacialCharactors.max),
        noOfSpaces = generateRandomNumber(configs.spaces.min, configs.spaces.max);

    var charTypes = findPositionsOfCharTypes(passwordWithoutApplyingConfigs);

    // validate for required caps letters
    verifyCapsLetters(charTypes.capsLetters, noOfCaps, charTypes.lowerLetters);

    // validate for required numberals
    verifyNumerals(charTypes.numerals, noOfNumerals, charTypes.lowerLetters);

    // validate for required special charactors
    if (configs.spacialCharactors.includes.length > 0) {
        verifySpecialCharactors(charTypes.specials, noOfSpecialChars, charTypes.lowerLetters, configs.spacialCharactors.includes.join(''));
    }

    // validate for required spaces
    if (configs.spaces.allow) {
        verifySpaces(charTypes.spaces, noOfSpaces, charTypes.lowerLetters);
    }

    return joinGeneratedPassword(charTypes, passwordLength);
};

var generateRandomText = function generateRandomText(type, length) {
    switch (type) {
        case 'RANDOM':
            return _randomstring2.default.generate({ length: length, charset: 'alphabetic' });
        default:
            return generateWordBasedText(length);
    }
};

var generateWordBasedText = function generateWordBasedText(length) {
    var text = '';

    while (text.length <= length) {
        text += (0, _randomWordByLength2.default)();
    }
    return text.substring(0, length);
};

var generateRandomNumber = function generateRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
};

var findPositionsOfCharTypes = function findPositionsOfCharTypes(text) {
    var capsLetters = [],
        lowerLetters = [],
        numerals = [],
        spaces = [],
        specials = [];
    for (var i = 0; i < text.length; i++) {
        if (text[i].match(/[A-Z]/) !== null) {
            capsLetters.push({ index: i, charactor: text[i] });
        } else {
            lowerLetters.push({ index: i, charactor: text[i] });
        }
    }
    return { capsLetters: capsLetters, lowerLetters: lowerLetters, numerals: numerals, spaces: spaces, specials: specials };
};

var verifyCapsLetters = function verifyCapsLetters(capsCharset, noOfCaps, defaultCharset) {
    if (capsCharset.length < noOfCaps) {
        handleLessCharsThanRequired(capsCharset, noOfCaps, defaultCharset, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
    } else if (capsCharset.length > noOfCaps) {
        handleMoreCharsThanRequired(capsCharset, noOfCaps, defaultCharset);
    }
};

var verifyNumerals = function verifyNumerals(numeralCharset, noOfNumerals, defaultCharset) {
    if (numeralCharset.length < noOfNumerals) {
        handleLessCharsThanRequired(numeralCharset, noOfNumerals, defaultCharset, '0123456789');
    } else if (numeralCharset.length > noOfNumerals) {
        handleMoreCharsThanRequired(numeralCharset, noOfNumerals, defaultCharset);
    }
};

var verifySpecialCharactors = function verifySpecialCharactors(specialCharset, noOfSpecialChars, defaultCharset, includes) {
    if (specialCharset.length < noOfSpecialChars) {
        handleLessCharsThanRequired(specialCharset, noOfSpecialChars, defaultCharset, includes);
    } else if (specialCharset.length > noOfSpecialChars) {
        handleMoreCharsThanRequired(specialCharset, noOfSpecialChars, defaultCharset);
    }
};

var verifySpaces = function verifySpaces(spaceCharset, noOfSpaces, defaultCharset) {
    if (spaceCharset.length < noOfSpaces) {
        handleLessCharsThanRequired(spaceCharset, noOfSpaces, defaultCharset, ' ');
    } else if (spaceCharset.length > noOfSpaces) {
        handleMoreCharsThanRequired(spaceCharset, noOfSpaces, defaultCharset);
    }
};

var handleMoreCharsThanRequired = function handleMoreCharsThanRequired(charset, noOfRequired, defaultCharset) {
    var noOfElemToRemove = charset.length - noOfRequired;
    for (var i = 0; i < noOfElemToRemove; i++) {
        var randomIndex = generateRandomNumber(0, charset.length - 1);
        var elemToRemove = charset[randomIndex];
        charset.splice(randomIndex, 1);
        var newElem = _extends({}, elemToRemove, {
            charactor: _randomstring2.default.generate({ length: 1, charset: 'alphabetic', capitalization: 'lowercase' })
        });
        defaultCharset.push(newElem);
    }
};

var handleLessCharsThanRequired = function handleLessCharsThanRequired(charset, noOfRequired, defaultCharset, requiredCharset) {
    var noOfElemToAdd = noOfRequired - charset.length;
    for (var i = 0; i < noOfElemToAdd; i++) {
        var randomIndex = generateRandomNumber(0, defaultCharset.length - 1);
        var elemToAdd = defaultCharset[randomIndex];
        defaultCharset.splice(randomIndex, 1);
        var newElem = _extends({}, elemToAdd, {
            charactor: _randomstring2.default.generate({ length: 1, charset: requiredCharset })
        });
        charset.push(newElem);
    }
};

var joinGeneratedPassword = function joinGeneratedPassword(charTypes, length) {
    var generatedPassword = new Array(length);
    Object.entries(charTypes).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        value.forEach(function (v) {
            generatedPassword[v.index] = v.charactor;
        });
    });

    return generatedPassword.join('');
};